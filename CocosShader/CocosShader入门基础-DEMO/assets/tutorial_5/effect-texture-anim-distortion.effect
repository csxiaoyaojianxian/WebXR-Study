// Effect Syntax Guide: https://github.com/cocos-creator/docs-3d/blob/master/zh/material-system/effect-syntax.md

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: legacy/main-functions/general-vs:vert # builtin header
      frag: unlit-fs:frag
      properties: &props
        mainTexture: { value: white } # 主纹理
        detailTexture: { value: black } # 扭曲纹理
        strengthen: { value: 0.05, target: params.x } # 扭曲强度
        cells: { value: [1.0,1.0], target: params.yz }
        detailColorFactor: { value: 0.5, target: params.w } # 扭曲素材混合系数，若为0则仅扭曲原素材
        fps: { value: 12.0 }
        mainColor: { value: [1, 1, 1, 1], editor: { type: color } }
  - name: transparent
    passes:
    - vert: legacy/main-functions/general-vs:vert # builtin header
      frag: unlit-fs:frag
      blendState:   
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%  
                               
CCProgram unlit-fs %{
  // 3 动画扭曲
  precision highp float;
  #include <legacy/output>
  #include <legacy/fog-fs>

  in vec2 v_uv;
  in vec3 v_position;

  uniform sampler2D mainTexture;
  uniform sampler2D detailTexture;

  uniform Constant {
    vec4 mainColor;
    vec4 params;
    float fps;
  };

  vec4 frag () {
    float strengthen = params.x;
    vec2 cells = params.yz;
    float detailColorFactor = params.w;

    // 扭曲贴图采样
    float index = floor(cc_time.x * fps);
    float row = cells.x;
    float col = cells.y;
    vec2 animUV = v_uv / cells.yx + vec2(mod(index,col)/col,floor(index/col)/row);
    vec4 detailColor = texture(detailTexture, animUV);
    // 取灰度图，越亮(1)扭曲偏移越大
    float gray = detailColor.r * 0.3 + detailColor.g * 0.6 + detailColor.b * 0.1;
    // 计算偏移量vec2
    vec2 offset = (detailColor.rg - 0.5) * 2.0 * strengthen * gray;
    // 基于原始素材偏移采样形成扭曲效果
    vec4 color = mainColor * texture(mainTexture, v_uv + offset);
    // 混合扭曲素材
    color.rgb += detailColor.rgb * detailColorFactor;

    CC_APPLY_FOG(color, v_position);
    return CCFragOutput(color);
  }
}%
